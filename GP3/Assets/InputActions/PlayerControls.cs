//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BaseMovement2D"",
            ""id"": ""85c6d21f-6a80-405a-9d1f-cb3da3a82729"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""16c62235-1e88-4965-9275-427044787aac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""45459554-fa7b-4fcf-b213-2d411da8b163"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GrowPole"",
                    ""type"": ""Button"",
                    ""id"": ""e3eee83b-a8da-4319-8d41-8ce02fd0681e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05bd2a18-ba72-44dc-812a-a31cb8740893"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e093a306-88b1-4706-945f-20774dcd7467"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d7c66c2e-dfe0-4c5a-a291-a9d68a030eaa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cf7721fb-900b-47ec-8157-7782583bf029"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aeb141a4-d975-4901-93dc-2d0f49d7abdc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2bae90fe-2f19-4806-bdfb-b05275d643ed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""121d69c7-85de-4aab-85cb-7ec7fb167a98"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a3a22bd5-09ae-4f1c-a32b-7460ea8074a9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrowPole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BaseMovement3D"",
            ""id"": ""c76208a6-c965-4646-9c22-9e62cbe69a8f"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""49ca3d43-21b4-45e8-8733-4c0216729fba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4c0dd813-8232-48b3-925b-e2351dff8136"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GrowPole"",
                    ""type"": ""Button"",
                    ""id"": ""8f9b6a7a-8c11-4a30-8967-254e9b34234b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""666d23a9-7a88-4922-bed9-3b852a87de9e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9e44d8d-ae64-4db7-a57d-52c5a3b685fc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ab10f72d-2177-48b9-bb6b-2c905df1b0ab"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6d0bc771-aa6c-48c7-abc2-28c76a830bc4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""46269892-4320-496d-81e6-5a820a2ca70a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f88fa6cc-b3b0-4a07-a486-a391ae8b3ddc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4d65c520-03a4-4d38-85bd-60985c2fe4a5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""09e5deb7-6fe7-432e-801b-d2e27e8584c3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrowPole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseMovement2D
        m_BaseMovement2D = asset.FindActionMap("BaseMovement2D", throwIfNotFound: true);
        m_BaseMovement2D_Jump = m_BaseMovement2D.FindAction("Jump", throwIfNotFound: true);
        m_BaseMovement2D_Move = m_BaseMovement2D.FindAction("Move", throwIfNotFound: true);
        m_BaseMovement2D_GrowPole = m_BaseMovement2D.FindAction("GrowPole", throwIfNotFound: true);
        // BaseMovement3D
        m_BaseMovement3D = asset.FindActionMap("BaseMovement3D", throwIfNotFound: true);
        m_BaseMovement3D_Jump = m_BaseMovement3D.FindAction("Jump", throwIfNotFound: true);
        m_BaseMovement3D_Move = m_BaseMovement3D.FindAction("Move", throwIfNotFound: true);
        m_BaseMovement3D_GrowPole = m_BaseMovement3D.FindAction("GrowPole", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseMovement2D
    private readonly InputActionMap m_BaseMovement2D;
    private List<IBaseMovement2DActions> m_BaseMovement2DActionsCallbackInterfaces = new List<IBaseMovement2DActions>();
    private readonly InputAction m_BaseMovement2D_Jump;
    private readonly InputAction m_BaseMovement2D_Move;
    private readonly InputAction m_BaseMovement2D_GrowPole;
    public struct BaseMovement2DActions
    {
        private @PlayerControls m_Wrapper;
        public BaseMovement2DActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BaseMovement2D_Jump;
        public InputAction @Move => m_Wrapper.m_BaseMovement2D_Move;
        public InputAction @GrowPole => m_Wrapper.m_BaseMovement2D_GrowPole;
        public InputActionMap Get() { return m_Wrapper.m_BaseMovement2D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseMovement2DActions set) { return set.Get(); }
        public void AddCallbacks(IBaseMovement2DActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseMovement2DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseMovement2DActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrowPole.started += instance.OnGrowPole;
            @GrowPole.performed += instance.OnGrowPole;
            @GrowPole.canceled += instance.OnGrowPole;
        }

        private void UnregisterCallbacks(IBaseMovement2DActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrowPole.started -= instance.OnGrowPole;
            @GrowPole.performed -= instance.OnGrowPole;
            @GrowPole.canceled -= instance.OnGrowPole;
        }

        public void RemoveCallbacks(IBaseMovement2DActions instance)
        {
            if (m_Wrapper.m_BaseMovement2DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseMovement2DActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseMovement2DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseMovement2DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseMovement2DActions @BaseMovement2D => new BaseMovement2DActions(this);

    // BaseMovement3D
    private readonly InputActionMap m_BaseMovement3D;
    private List<IBaseMovement3DActions> m_BaseMovement3DActionsCallbackInterfaces = new List<IBaseMovement3DActions>();
    private readonly InputAction m_BaseMovement3D_Jump;
    private readonly InputAction m_BaseMovement3D_Move;
    private readonly InputAction m_BaseMovement3D_GrowPole;
    public struct BaseMovement3DActions
    {
        private @PlayerControls m_Wrapper;
        public BaseMovement3DActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BaseMovement3D_Jump;
        public InputAction @Move => m_Wrapper.m_BaseMovement3D_Move;
        public InputAction @GrowPole => m_Wrapper.m_BaseMovement3D_GrowPole;
        public InputActionMap Get() { return m_Wrapper.m_BaseMovement3D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseMovement3DActions set) { return set.Get(); }
        public void AddCallbacks(IBaseMovement3DActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseMovement3DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseMovement3DActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrowPole.started += instance.OnGrowPole;
            @GrowPole.performed += instance.OnGrowPole;
            @GrowPole.canceled += instance.OnGrowPole;
        }

        private void UnregisterCallbacks(IBaseMovement3DActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrowPole.started -= instance.OnGrowPole;
            @GrowPole.performed -= instance.OnGrowPole;
            @GrowPole.canceled -= instance.OnGrowPole;
        }

        public void RemoveCallbacks(IBaseMovement3DActions instance)
        {
            if (m_Wrapper.m_BaseMovement3DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseMovement3DActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseMovement3DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseMovement3DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseMovement3DActions @BaseMovement3D => new BaseMovement3DActions(this);
    public interface IBaseMovement2DActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnGrowPole(InputAction.CallbackContext context);
    }
    public interface IBaseMovement3DActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnGrowPole(InputAction.CallbackContext context);
    }
}
